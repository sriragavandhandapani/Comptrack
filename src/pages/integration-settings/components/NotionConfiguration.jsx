import React, { useState } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';

import Select from '../../../components/ui/Select';
import { Checkbox } from '../../../components/ui/Checkbox';

const NotionConfiguration = ({ isConnected, onConnect, onDisconnect }) => {
  const [selectedWorkspace, setSelectedWorkspace] = useState('acme-product-team');
  const [selectedDatabase, setSelectedDatabase] = useState('competitor-intel-db');
  const [pageTemplate, setPageTemplate] = useState('detailed-report');
  const [summaryFormat, setSummaryFormat] = useState('structured');
  const [frequency, setFrequency] = useState('daily');
  const [impactFilter, setImpactFilter] = useState(['high', 'medium']);
  const [autoCreatePages, setAutoCreatePages] = useState(true);
  const [isTestingConnection, setIsTestingConnection] = useState(false);

  const workspaceOptions = [
    { value: 'acme-product-team', label: 'Acme Product Team' },
    { value: 'competitive-research', label: 'Competitive Research' },
    { value: 'product-strategy', label: 'Product Strategy' }
  ];

  const databaseOptions = [
    { value: 'competitor-intel-db', label: 'Competitor Intelligence Database' },
    { value: 'market-research-db', label: 'Market Research Database' },
    { value: 'product-updates-db', label: 'Product Updates Database' }
  ];

  const templateOptions = [
    { value: 'detailed-report', label: 'Detailed Report Template' },
    { value: 'summary-card', label: 'Summary Card Template' },
    { value: 'timeline-entry', label: 'Timeline Entry Template' }
  ];

  const formatOptions = [
    { value: 'structured', label: 'Structured Format' },
    { value: 'narrative', label: 'Narrative Format' },
    { value: 'bullet-points', label: 'Bullet Points Format' }
  ];

  const frequencyOptions = [
    { value: 'immediate', label: 'Immediate Updates' },
    { value: 'daily', label: 'Daily Digest' },
    { value: 'weekly', label: 'Weekly Summary' }
  ];

  const handleTestConnection = async () => {
    setIsTestingConnection(true);
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000));
    setIsTestingConnection(false);
    alert('Test page created successfully in ' + selectedDatabase);
  };

  const handleConnect = () => {
    onConnect('notion');
  };

  const handleDisconnect = () => {
    onDisconnect('notion');
  };

  const sampleNotionContent = `# Competitor Intelligence Report
**Generated:** ${new Date().toLocaleDateString()}
**Competitor:** Figma
**Change Type:** New Feature Launch

## Executive Summary
Figma has introduced an AI-powered design assistant that automatically suggests layout improvements and generates design variations. This represents a significant advancement in their product capabilities and directly impacts our competitive positioning.

## Key Changes Detected

### ðŸŽ¯ New Feature: AI Design Assistant
- **Impact Level:** High
- **Category:** Product Enhancement
- **Detection Date:** ${new Date().toLocaleDateString()}

**Description:**
The new AI assistant provides real-time design suggestions and can generate multiple layout variations automatically.

**Key Capabilities:**
â€¢ Automatic layout optimization
â€¢ Design variation generation
â€¢ Component library integration
â€¢ Real-time feedback system

## Competitive Impact Analysis

### Direct Threats
- Competes with our upcoming AI design tools
- May accelerate customer expectations for AI features
- Potential to reduce design iteration time significantly

### Strategic Recommendations
1. **Accelerate AI Roadmap:** Move up timeline for our AI features by 2-3 months
2. **Feature Parity Analysis:** Conduct detailed comparison with our planned features
3. **Customer Research:** Survey existing customers about AI design tool preferences
4. **Marketing Response:** Prepare competitive messaging around our unique AI approach

## Technical Details
- Implementation appears to use machine learning models
- Integration with existing Figma workflow is seamless
- Performance metrics show 40% faster design iteration

## Next Steps
- [ ] Schedule competitive analysis meeting
- [ ] Update product roadmap priorities
- [ ] Conduct customer interviews
- [ ] Prepare market response strategy

---
*This report was automatically generated by Competitor Feature Tracker*`;

  return (
    <div className="space-y-6">
      {/* Connection Status */}
      <div className="bg-card border border-border rounded-lg p-6">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-black rounded-lg flex items-center justify-center">
              <Icon name="FileText" size={20} color="white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-foreground">Notion Integration</h3>
              <p className="text-sm text-muted-foreground">
                {isConnected ? 'Connected and syncing' : 'Not connected'}
              </p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-success' : 'bg-muted-foreground'}`} />
            <span className={`text-sm font-medium ${isConnected ? 'text-success' : 'text-muted-foreground'}`}>
              {isConnected ? 'Connected' : 'Disconnected'}
            </span>
          </div>
        </div>

        {isConnected && (
          <div className="bg-success/10 border border-success/20 rounded-lg p-4 mb-4">
            <div className="flex items-start space-x-3">
              <Icon name="CheckCircle" size={20} className="text-success mt-0.5" />
              <div>
                <p className="text-sm font-medium text-success">Integration Active</p>
                <p className="text-sm text-success/80 mt-1">
                  Last sync: Today at 1:30 PM â€¢ 3 pages created this week
                </p>
              </div>
            </div>
          </div>
        )}

        <div className="flex space-x-3">
          {!isConnected ? (
            <Button variant="default" onClick={handleConnect}>
              <Icon name="Link" size={16} className="mr-2" />
              Connect Notion
            </Button>
          ) : (
            <Button variant="outline" onClick={handleDisconnect}>
              <Icon name="Unlink" size={16} className="mr-2" />
              Disconnect
            </Button>
          )}
          {isConnected && (
            <Button 
              variant="secondary" 
              onClick={handleTestConnection}
              loading={isTestingConnection}
            >
              <Icon name="FileText" size={16} className="mr-2" />
              Create Test Page
            </Button>
          )}
        </div>
      </div>

      {/* Configuration Form */}
      {isConnected && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Settings Panel */}
          <div className="space-y-6">
            <div className="bg-card border border-border rounded-lg p-6">
              <h4 className="text-lg font-semibold text-foreground mb-4">Workspace Settings</h4>
              
              <div className="space-y-4">
                <Select
                  label="Notion Workspace"
                  options={workspaceOptions}
                  value={selectedWorkspace}
                  onChange={setSelectedWorkspace}
                />

                <Select
                  label="Target Database"
                  options={databaseOptions}
                  value={selectedDatabase}
                  onChange={setSelectedDatabase}
                  searchable
                />

                <Select
                  label="Page Template"
                  options={templateOptions}
                  value={pageTemplate}
                  onChange={setPageTemplate}
                />
              </div>
            </div>

            <div className="bg-card border border-border rounded-lg p-6">
              <h4 className="text-lg font-semibold text-foreground mb-4">Content Configuration</h4>
              
              <div className="space-y-4">
                <Select
                  label="Summary Format"
                  options={formatOptions}
                  value={summaryFormat}
                  onChange={setSummaryFormat}
                />

                <Select
                  label="Update Frequency"
                  options={frequencyOptions}
                  value={frequency}
                  onChange={setFrequency}
                />

                <div>
                  <label className="text-sm font-medium text-foreground mb-3 block">
                    Impact Level Filter
                  </label>
                  <div className="space-y-2">
                    <Checkbox
                      label="High Impact Changes"
                      checked={impactFilter.includes('high')}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setImpactFilter([...impactFilter, 'high']);
                        } else {
                          setImpactFilter(impactFilter.filter(level => level !== 'high'));
                        }
                      }}
                    />
                    <Checkbox
                      label="Medium Impact Changes"
                      checked={impactFilter.includes('medium')}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setImpactFilter([...impactFilter, 'medium']);
                        } else {
                          setImpactFilter(impactFilter.filter(level => level !== 'medium'));
                        }
                      }}
                    />
                    <Checkbox
                      label="Low Impact Changes"
                      checked={impactFilter.includes('low')}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setImpactFilter([...impactFilter, 'low']);
                        } else {
                          setImpactFilter(impactFilter.filter(level => level !== 'low'));
                        }
                      }}
                    />
                  </div>
                </div>

                <Checkbox
                  label="Auto-create pages for new competitors"
                  checked={autoCreatePages}
                  onChange={(e) => setAutoCreatePages(e.target.checked)}
                  description="Automatically create Notion pages when new competitors are detected"
                />
              </div>
            </div>
          </div>

          {/* Preview Panel */}
          <div className="space-y-6">
            <div className="bg-card border border-border rounded-lg p-6">
              <h4 className="text-lg font-semibold text-foreground mb-4">Page Preview</h4>
              
              <div className="bg-white border border-gray-200 rounded-lg p-4 max-h-96 overflow-y-auto">
                <div className="prose prose-sm max-w-none">
                  <pre className="text-gray-800 text-xs whitespace-pre-wrap leading-relaxed font-sans">
                    {sampleNotionContent}
                  </pre>
                </div>
              </div>
              
              <div className="mt-4 p-3 bg-muted/50 rounded-lg">
                <p className="text-xs text-muted-foreground">
                  This preview shows how your competitive intelligence reports will appear in Notion. 
                  The format will adjust based on your selected template and summary format settings.
                </p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default NotionConfiguration;